source("../code/preprocessData_new_SWR.R")
library("modelr")
library(pROC)
library(viridis)
library(gridExtra)
library(sjPlot)
library(mgcv)
# sets how code looks in knitted document
opts_chunk$set(comment = "")
# suppresses warning about grouping
options(dplyr.summarise.inform = F)
df.fp_data <- read.csv("~/Documents/Data/school_deidentified_data/school_ca_01/fp_data.csv")
# all grade data
df.trials_swr <- read_csv("~/Documents/Data/school_deidentified_data/school_ca_01/Fall2022/roar_swr_trials.csv")
df.trials_swr_clean <- df.trials_swr %>%
filter(completed == TRUE, task == "test_response") %>%
select(pid, trialNumTotal, thetaEstimate, thetaSE) %>%
arrange(trialNumTotal)
df.fp_data_clean <- df.fp_data %>%
select(pid, novfpreadinglevel, gradelevel) %>%
filter(!is.na(novfpreadinglevel), gradelevel < 3) %>%
mutate(novfpreadinglevel = tolower(novfpreadinglevel)) %>%
mutate(new_score = if_else(novfpreadinglevel == "below a", 'a', novfpreadinglevel)) %>%
mutate(novfpreadinglevel_numeric = match(unlist(strsplit(new_score , split="")), letters)) %>%
mutate(risk = if_else(((novfpreadinglevel_numeric < 5) & (gradelevel == 1)) | ((novfpreadinglevel_numeric < 10) & (gradelevel == 2)) , 1, 0)) %>%
select(-new_score)
df.combined <- df.trials_swr_clean %>%
left_join(df.fp_data_clean, by = 'pid') %>%
filter(!is.na(novfpreadinglevel))
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 0.5) +
geom_smooth() +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
stat_cor(cor.coef.name = 'r', aes(label = ..r.label..), color = "black",
geom = "label",vjust = .6) +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
stat_cor(cor.coef.name = 'r', aes(label = ..r.label..), color = "black",
geom = "label",vjust = .6) +
facet_wrap(~grade,  scales = "free") +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
df.tmp
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
stat_cor(cor.coef.name = 'r', aes(label = ..r.label..), color = "black",
geom = "label",vjust = .6) +
facet_wrap(~grade,  scales = "free") +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
stat_cor(cor.coef.name = 'r', aes(label = ..r.label..), color = "black",
geom = "label",vjust = .6) +
facet_wrap(~gradelevel,  scales = "free") +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
roar.cat.curve <- function(df, gradelevel){
list.cor <- c()
list.auc<- c()
for (i in 1:100){
if (i %% 6 != 0){
df.tmp <- df %>%
filter(trialNumTotal == i)
list.cor <- c(list.cor, cor(df.tmp$thetaEstimate, df.tmp$novfpreadinglevel_numeric))
gam_model.swr.1 <- gam(risk ~ thetaEstimate, data = df.tmp, family = "binomial")
predictions <- predict(gam_model.swr.1, type = 'response')
table <- tibble(pred = predictions,
Y = df.tmp$risk) %>% mutate(pred = ifelse(pred <= 0.5, 0, 1))
r = roc(response = table$Y, predictor = predictions)
list.auc <- c(list.auc, round(as.numeric(r$auc), digits = 3))
}
}
return (tibble(trialNumTotal = seq(1:85),
correlation = list.cor,
auc = list.auc,
gradelevel = gradelevel))
}
df.roar.cat.curve.1 <- roar.cat.curve(df.combined %>% filter(gradelevel ==1),"1")
library("knitr") # for rendering the RMarkdown file
library("tidyverse") # for data wrangling
library(dplyr)
library('ggpubr')
library(ggplot2)
library(caTools)
library(ROCR)
library(caret)
source("../code/preprocessData_new_PA.R")
source("../code/preprocessData_new_SWR.R")
library("modelr")
library(pROC)
library(viridis)
library(gridExtra)
library(sjPlot)
library(mgcv)
# sets how code looks in knitted document
opts_chunk$set(comment = "")
# suppresses warning about grouping
options(dplyr.summarise.inform = F)
df.fp_data <- read.csv("~/Documents/Data/school_deidentified_data/school_ca_01/fp_data.csv")
# all grade data
df.trials_swr <- read_csv("~/Documents/Data/school_deidentified_data/school_ca_01/Fall2022/roar_swr_trials.csv")
df.trials_swr_clean <- df.trials_swr %>%
filter(completed == TRUE, task == "test_response") %>%
select(pid, trialNumTotal, thetaEstimate, thetaSE) %>%
arrange(trialNumTotal)
df.fp_data_clean <- df.fp_data %>%
select(pid, novfpreadinglevel, gradelevel) %>%
filter(!is.na(novfpreadinglevel), gradelevel < 3) %>%
mutate(novfpreadinglevel = tolower(novfpreadinglevel)) %>%
mutate(new_score = if_else(novfpreadinglevel == "below a", 'a', novfpreadinglevel)) %>%
mutate(novfpreadinglevel_numeric = match(unlist(strsplit(new_score , split="")), letters)) %>%
mutate(risk = if_else(((novfpreadinglevel_numeric < 5) & (gradelevel == 1)) | ((novfpreadinglevel_numeric < 10) & (gradelevel == 2)) , 1, 0)) %>%
select(-new_score)
df.combined <- df.trials_swr_clean %>%
left_join(df.fp_data_clean, by = 'pid') %>%
filter(!is.na(novfpreadinglevel))
df.tmp <- df.combined %>%
filter(trialNumTotal == 100)
ggplot(df.tmp, mapping = aes(x = thetaEstimate,
y = novfpreadinglevel_numeric)) +
geom_point(size = 1) +
stat_cor(cor.coef.name = 'r', aes(label = ..r.label..), color = "black",
geom = "label",vjust = .6) +
facet_wrap(~gradelevel,  scales = "free") +
labs(x = "thetaEstimate after 100 trials",
y = "likelihood to predict random 20 trials from the rest",
title = "prediction through likelihood")
roar.cat.curve <- function(df, gradelevel){
list.cor <- c()
list.auc<- c()
for (i in 1:100){
if (i %% 6 != 0){
df.tmp <- df %>%
filter(trialNumTotal == i)
list.cor <- c(list.cor, cor(df.tmp$thetaEstimate, df.tmp$novfpreadinglevel_numeric))
gam_model.swr.1 <- gam(risk ~ thetaEstimate, data = df.tmp, family = "binomial")
predictions <- predict(gam_model.swr.1, type = 'response')
table <- tibble(pred = predictions,
Y = df.tmp$risk) %>% mutate(pred = ifelse(pred <= 0.5, 0, 1))
r = roc(response = table$Y, predictor = predictions)
list.auc <- c(list.auc, round(as.numeric(r$auc), digits = 3))
}
}
return (tibble(trialNumTotal = seq(1:85),
correlation = list.cor,
auc = list.auc,
gradelevel = gradelevel))
}
df.roar.cat.curve.1 <- roar.cat.curve(df.combined %>% filter(gradelevel ==1),"1")
roar.cat.curve <- function(df, gradelevel){
list.cor <- c()
list.auc<- c()
for (i in 1:100){
if (i %% 6 != 0){
df.tmp <- df %>%
filter(trialNumTotal == i)
list.cor <- c(list.cor, cor(df.tmp$thetaEstimate, df.tmp$novfpreadinglevel_numeric))
gam_model.swr.1 <- gam(risk ~ thetaEstimate, data = df.tmp, family = "binomial")
predictions <- predict(gam_model.swr.1, type = 'response')
table <- tibble(pred = predictions,
Y = df.tmp$risk) %>% mutate(pred = ifelse(pred <= 0.5, 0, 1))
r = roc(response = table$Y, predictor = predictions)
list.auc <- c(list.auc, round(as.numeric(r$auc), digits = 3))
}
}
return (tibble(trialNumTotal = seq(1:84),
correlation = list.cor,
auc = list.auc,
gradelevel = gradelevel))
}
df.roar.cat.curve.1 <- roar.cat.curve(df.combined %>% filter(gradelevel ==1),"1")
df.roar.cat.curve.2 <- roar.cat.curve(df.combined %>% filter(gradelevel ==2), "2")
df.roar.cat.curve <- rbind(df.roar.cat.curve.1, df.roar.cat.curve.2)
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_point() +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)")
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth() +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_point() +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)")
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)")
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)") +
scale_y_continuous(breaks = round(seq(min(df.roar.cat.curve$correlation), 1, by = 0.1),1)) +
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)") +
scale_y_continuous(breaks = round(seq(min(df.roar.cat.curve$correlation), 1, by = 0.1),1)) +
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)") +
scale_y_continuous(breaks = round(seq(min(df.roar.cat.curve$correlation), 1, by = 0.1),1))
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)") +
scale_y_continuous(breaks = round(seq(min(df.roar.cat.curve$correlation), 1, by = 0.05),1))
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.roar.cat.curve
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = correlation,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "Correlation (Fountas & Pinnell vs ROAR thetaEstimate)") +
scale_y_continuous(breaks = round(seq(min(df.roar.cat.curve$correlation), 1, by = 0.01),1))
ggplot(df.roar.cat.curve, aes(x = trialNumTotal,
y = auc,
color = gradelevel)) + geom_smooth(se = FALSE) +labs(x = "number of trials",
y = "AUC (ROAR thetaEstimate as risk predictors)")
# error bar: CI of correlation
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
library("knitr") # for rendering the RMarkdown file
library("tidyverse") # for data wrangling
library(dplyr)
library(mirt)
library('ggpubr')
library(Metrics)
library(hash)
library(ggplot2)
library(GGally)
library(gridExtra)
library("catR")
library(corrplot)
# sets how code looks in knitted document
opts_chunk$set(comment = "")
# suppresses warning about grouping
options(dplyr.summarise.inform = F)
# all grade data
df.trials <- read_csv("~/Documents/Data/roar_trial_data/20220226swr_raw_trials.csv")
df.data <- df.trials %>%
filter(studyId == "school-shortAdaptive",
task == "test_response",
completed == TRUE,
runId != "2hXubKADai2X3FMXNdx4")
func.empirical.reliability <- function (df){
list.r <- NULL
list.trials <- NULL
trialNumTotal <- 0
for (i in (1: 100)) {
if (i %% 6 != 0) {
trialNumTotal <- trialNumTotal + 1
df.tmp <- df %>%
filter(trialNumTotal == i) %>%
select(thetaEstimate, thetaSE) %>%
dplyr :: rename(F1 = thetaEstimate, SE_F1 = thetaSE)
list.r <- c(list.r, as.numeric(empirical_rxx(as.matrix(df.tmp))))
list.trials <- c(list.trials, trialNumTotal)
}
}
return (tibble(trialNumTotal= list.trials, reliability= list.r))
}
df.empirical.reliability <- func.empirical.reliability(df.data)
ggplot(df.empirical.reliability, mapping = aes(x = trialNumTotal,
y = reliability)) +
geom_point() +
ylim(0, 1) +
xlim(0, 84) +
scale_y_continuous(breaks = round(seq(min(df.empirical.reliability$reliability), 1, by = 0.1),1)) +
labs(x = "num of items",
y = "empirical reliability",
title = "Empirical Reliability of ROAR-CAT (N = 3125)")
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
hist(df.newwords)
ggplot(df.data %>%
filter(trialNumTotal == 100), mapping = aes(x = thetaEstimate,
y = thetaSE,
color = schoolId,
group = schoolId)) +
geom_point()
df.data %>%
filter(trialNumTotal == 100)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
hist(df.theta$thetaEstimate)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta$thetaEstimate)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta) +
geom_histogram(aes(x = thetaEstimate), color="black", fill="grey", bins = 20)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta) +
geom_histogram(aes(x = thetaEstimate), color="black", fill="grey", bins = 80)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta) +
geom_histogram(aes(x = thetaEstimate), color="black", fill="grey", bins = 40)
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta) +
geom_histogram(aes(x = thetaEstimate), color="black", fill="grey", bins = 40) +
labs(x = "thetaEstimate",
y = "count of students",
title = "Distribution of thetas (N = 3125)")
df.theta <- df.data %>%
filter(trialNumTotal == 100)
ggplot(df.theta) +
geom_histogram(aes(x = thetaEstimate), color="black", fill="grey", bins = 40) +
labs(x = "thetaEstimate",
y = "count of students",
title = "Distribution of thetas (N = 3125)")
ggplot(df.theta) +
geom_histogram(aes(x = thetaSE), color="black", fill="grey", bins = 40) +
labs(x = "thetaEstimate",
y = "count of students",
title = "Distribution of thetas (N = 3125)")
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
df.newwords
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
df.newwords
ggplot(df.newwords) +
geom_histogram(aes(x = n), color="black", fill="grey", bins = 40) +
labs(x = "thetaEstimate",
y = "count of students",
title = "Distribution of thetas (N = 3125)")
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
df.newwords
ggplot(df.newwords) +
geom_histogram(aes(x = n), color="black", fill="grey", bins = 40) +
labs(x = "count of responses",
y = "number of words",
title = "Distribution of new words (N = 400)")
df.newwords <- df.data %>%
filter(corpusId == 'corpusNew') %>%
group_by(word) %>%
tally()
df.newwords
ggplot(df.newwords) +
geom_histogram(aes(x = n), color="black", fill="grey", bins = 40) +
labs(x = "count of responses",
y = "number of words",
title = "Distribution of new words (N = 400)")
data <- read_text("raschdata.txt")
library("knitr") # for rendering the RMarkdown file
library("tidyverse") # for data wrangling
library(dplyr)
library(mirt)
library('ggpubr')
library(Metrics)
library(hash)
library(ggplot2)
library(GGally)
library(gridExtra)
library("catR")
library(corrplot)
data <- read_text("raschdata.txt")
data <- read_csv("raschdata.txt")
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
data <- read_csv("raschdata.txt")
view(data)
data <- read_csv("raschdata.txt", split = " ")
data <- read.table("raschdata.txt", sep = "")
view(data)
data <- read.table("raschdata.txt", header = T, sep = "")
view(data)
b<-rnorm(1)
b
b.mat<-matrix(b,np,ni,byrow=TRUE) #these are the item difficulties
b.mat #difficulties, one per item
b.mat<-matrix(b,1,ni,byrow=TRUE) #these are the item difficulties
b.mat #difficulties, one per item
b.mat<-matrix(b,1,1,byrow=TRUE) #these are the item difficulties
b.mat #difficulties, one per item
length(data)
length(data$resp)
b.mat<-matrix(b,1,10,byrow=TRUE) #these are the item difficulties
b.mat #difficulties, one per item
n = length(data$resp)
b<-rnorm(1)
b.mat<-matrix(b,n,1,byrow=TRUE) #these are the item difficulties
b.mat #difficulties, one per item
th<-rnorm(np)
th.mat<-matrix(th,np,ni,byrow=FALSE)
th.mat
th.mat <- as.matrix(data$th)
th.mat
inv_logit<-function(x) exp(x)/(1+exp(x))
th.mat <- as.matrix(data$th)
pr<-inv_logit(th.mat-b.mat)
pr
resp.mat
resp.mat <- as.matrix(data$resp)
likelihood <-function(x, p)  p^(x) * (1-p)^(1-x)
likelihood(resp.mat, pr)
l.mat <- likelihood(resp.mat, pr)
plot(l.mat)
plot(l.mat[1])
plot(l.mat[,1])
plot(y = l.mat[,1], x = th.mat[,1])
plot(x = th.mat[,1], y = l.mat[,1], )
########## answer ##############
x<-read.table("raschdata.txt",header=TRUE)
resp<-as.numeric(x[,1])
th<-as.numeric(x[,2])
likelihood<-function(b,resp,th) {
k<-th-b
p<-exp(k)/(1+exp(k))
p^resp*(1-p)^(1-resp)
}
z<-likelihood(b=0,resp=resp,th=th)
loglik<-sum(log(z))
tmp<-list()
for (b in seq(-3,3,length.out=50))  {
z<-likelihood(b=b,resp=resp,th=th)
loglik<-sum(log(z))
tmp[[as.character(b)]]<-c(b,loglik)
}
plot(do.call("rbind",tmp))
